# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
  build-test:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.8
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
 
  conditional:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Set Environment Variables
          command: |
            #latest commit
            echo 'export LATEST_COMMIT=$(git rev-parse HEAD)' >> $BASH_ENV
            echo 'export FOLDER1_COMMIT=$(git log -1 --format=format:%H --full-diff scraper)' >> $BASH_ENV
            echo 'export FOLDER2_COMMIT=$(git log -1 --format=format:%H --full-diff static)' >> $BASH_ENV
            echo 'export FOLDER3_COMMIT=$(git log -1 --format=format:%H --full-diff .circleci)' >> $BASH_ENV
            source $BASH_ENV
      
      - run:
          name: Exit gracefully if no changes to any relevant folder
          command: |
            case $LATEST_COMMIT in
              "$FOLDER1_COMMIT" | "$FOLDER2_COMMIT" | "$FOLDER3_COMMIT") echo 'At least one relevant folder changed - execute deploy';;
              *) circleci-agent step halt;;
            esac  

      - run:
          name: Just testing 1
          command: |
              if [ $FOLDER1_COMMIT = $LATEST_COMMIT ];
                then
                  echo "Lastest commit in scraper so run the deploy task"
                  echo $FOLDER1_COMMIT
                  echo $LATEST_COMMIT
                else
                  echo "Lastest commit not in scraper or code just doesn't work"
                  echo $FOLDER1_COMMIT
                  echo $LATEST_COMMIT
              fi
      - run:
          name: Just testing 2
          command: |
              if [ $FOLDER2_COMMIT = $LATEST_COMMIT ];
                then
                  echo "Lastest commit in static so run the deploy task"
                  echo $FOLDER2_COMMIT
                  echo $LATEST_COMMIT
                else
                  echo "Lastest commit not in static or code just doesn't work"
                  echo $FOLDER2_COMMIT
                  echo $LATEST_COMMIT
              fi
  
      - run:
          name: Just testing 3
          command: |           
              if [ $FOLDER3_COMMIT = $LATEST_COMMIT ];
                then
                  echo "Lastest commit in .circleci so run the deploy task"
                  echo $FOLDER3_COMMIT
                  echo $LATEST_COMMIT
                else
                  echo "Lastest commit not in .circleci or code just doesn't work"
                  echo $FOLDER3_COMMIT
                  echo $LATEST_COMMIT
              fi
                  
  deploy:
    # requires:
    #   - build-test
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Set Environment Variables
          command: |
            #latest commit
            echo 'export LATEST_COMMIT=$(git rev-parse HEAD)' >> $BASH_ENV
            echo 'export SCRAPER_COMMIT=$(git log -1 --format=format:%H --full-diff scraper)' >> $BASH_ENV
            echo 'export WEBAPP_COMMIT=$(git log -1 --format=format:%H --full-diff webapp)' >> $BASH_ENV
            #echo 'export FOLDER3_COMMIT=$(git log -1 --format=format:%H --full-diff placeholder)' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Exit gracefully if no changes to any relevant folder
          command: |
            case $LATEST_COMMIT in
              "$SCRAPER_COMMIT" | "$WEBAPP_COMMIT" | "$FOLDER3_COMMIT") echo 'At least one relevant folder changed - execute deploy';;
              *) circleci-agent step halt;;
            esac  
                
      - run:
          name: Authorize GCloud Command Line Tool
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account circleci-gcf-deployer@nba-predictions-dev.iam.gserviceaccount.com --key-file=-
        
      - run:
          name: Deploy Google Cloud Functions
          command: |
            if [ $LATEST_COMMIT = $SCRAPER_COMMIT ];
              then
                # Deploy command
                FUNCTION_NAME=nba_basketball_reference_scraper
                gcloud functions deploy $FUNCTION_NAME \
                  --source=./scraper \
                  --project=$GCLOUD_PROJECT_ID \
                  --allow-unauthenticated \
                  --entry-point=nba_basketballreference_scraper \
                  --memory=1024MB \
                  --runtime=python38 \
                  --service-account=biqquery-service-account@nba-predictions-dev.iam.gserviceaccount.com \
                  --trigger-http \
                  --timeout=300

                # Need to figure out how to set this in the deploy
                # gcloud functions add-iam-policy-binding nba_basketball_reference_scraper \
                #   --member=allUsers \
                #   --role=roles/cloudfunctions.invoker \
                #   --project=$GCLOUD_PROJECT_ID
            fi

      - run:
          name: Deploy Web Service to Google App Engine
          command: |
            if [ $LATEST_COMMIT = $WEBAPP_COMMIT ];
              then
                # Deploy command
                gcloud app deploy ./webapp/app.yaml --project=$GCLOUD_PROJECT_ID --promote --quiet
            fi

workflows:
  version: 2.1
  build-test-and-deploy:
    jobs:
      - build-test
      #- conditional
      - deploy:
         filters:
           branches:
             only:
               - main
