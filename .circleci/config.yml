# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
  build-lint:
    docker:
      - image: circleci/python:3.8

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
             
  deploy-dev:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Set Environment Variables
          command: |
            #latest commit
            echo 'export LATEST_COMMIT=$(git rev-parse HEAD)' >> $BASH_ENV
            echo 'export SCRAPER_COMMIT=$(git log -1 --format=format:%H --full-diff scraper)' >> $BASH_ENV
            echo 'export WEBAPP_COMMIT=$(git log -1 --format=format:%H --full-diff webapp)' >> $BASH_ENV
            echo 'export DATA_MODEL_COMMIT=$(git log -1 --format=format:%H --full-diff data_model)' >> $BASH_ENV
            echo 'export GET_SCHEDULE_COMMIT=$(git log -1 --format=format:%H --full-diff get_schedule)' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Exit gracefully if no changes to any relevant folder
          command: |
            case $LATEST_COMMIT in
              "$SCRAPER_COMMIT" | "$WEBAPP_COMMIT" | "$DATA_MODEL_COMMIT" | "$GET_SCHEDULE_COMMIT" ) echo 'At least one relevant folder changed - execute deploy';;
              *) circleci-agent step halt;;
            esac  
                
      - run:
          name: Authorize GCloud Command Line Tool
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account circleci-gcf-deployer@nba-predictions-dev.iam.gserviceaccount.com --key-file=-
        
      - run:
          name: Deploy Google Cloud Functions
          command: |
            if [ $LATEST_COMMIT = $SCRAPER_COMMIT ];
              then
                # Deploy command
                FUNCTION_NAME=nba_basketball_reference_scraper
                gcloud functions deploy $FUNCTION_NAME \
                  --source=./scraper \
                  --project=$GCLOUD_PROJECT_ID \
                  --allow-unauthenticated \
                  --entry-point=nba_basketballreference_scraper \
                  --memory=1024MB \
                  --runtime=python38 \
                  --service-account=biqquery-service-account@nba-predictions-dev.iam.gserviceaccount.com \
                  --trigger-http \
                  --timeout=300

                gcloud alpha functions add-iam-policy-binding $FUNCTION_NAME \
                  --member=allUsers \
                  --role=roles/cloudfunctions.invoker \
                  --project=$GCLOUD_PROJECT_ID
            fi

            if [ $LATEST_COMMIT = $DATA_MODEL_COMMIT ];
              then
                # Deploy command
                FUNCTION_NAME=nba_model_game_refresh
                gcloud functions deploy $FUNCTION_NAME \
                  --source=./data_model \
                  --project=$GCLOUD_PROJECT_ID \
                  --allow-unauthenticated \
                  --entry-point=create_model_data \
                  --memory=1024MB \
                  --runtime=python38 \
                  --service-account=biqquery-service-account@nba-predictions-dev.iam.gserviceaccount.com \
                  --trigger-http \
                  --timeout=300

                gcloud alpha functions add-iam-policy-binding $FUNCTION_NAME \
                  --member=allUsers \
                  --role=roles/cloudfunctions.invoker \
                  --project=$GCLOUD_PROJECT_ID
            fi

            if [ $LATEST_COMMIT = $GET_SCHEDULE_COMMIT ];
              then
                # Deploy command
                FUNCTION_NAME=nba_get_upcoming_games
                gcloud functions deploy $FUNCTION_NAME \
                  --source=./get_schedule \
                  --project=$GCLOUD_PROJECT_ID \
                  --allow-unauthenticated \
                  --entry-point=write_to_bucket \
                  --memory=512MB \
                  --runtime=python38 \
                  --service-account=biqquery-service-account@nba-predictions-dev.iam.gserviceaccount.com \
                  --trigger-http \
                  --timeout=60 \
                  --set-env-vars=CLOUD_STORAGE_BUCKET=$CLOUD_STORAGE_BUCKET

                gcloud alpha functions add-iam-policy-binding $FUNCTION_NAME \
                  --member=allUsers \
                  --role=roles/cloudfunctions.invoker \
                  --project=$GCLOUD_PROJECT_ID
            fi

      - run:
          name: Deploy Web Service to Google App Engine
          command: |
            if [ $LATEST_COMMIT = $WEBAPP_COMMIT ];
              then
                # Deploy command
                gcloud app deploy ./webapp/app.yaml --project=$GCLOUD_PROJECT_ID --promote --quiet
            fi

  deploy-test:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Authorize GCloud Command Line Tool
          command: |
            echo $CIRCLE_CI_DEPLOYER_TEST_KEY | gcloud auth activate-service-account $CIRCLE_CI_DEPLOYER_TEST --key-file=-
        
      - run:
          name: Deploy Google Cloud Functions
          command: |
            # Deploy command
            FUNCTION_NAME=nba_basketball_reference_scraper
            gcloud functions deploy $FUNCTION_NAME \
              --source=./scraper \
              --project=$GCLOUD_PROJECT_ID_TEST \
              --allow-unauthenticated \
              --entry-point=nba_basketballreference_scraper \
              --memory=1024MB \
              --runtime=python38 \
              --service-account=$CLOUD_FUNCTION_SERVICE_ACCOUNT_TEST \
              --trigger-http \
              --timeout=300

            gcloud alpha functions add-iam-policy-binding $FUNCTION_NAME \
              --member=allUsers \
              --role=roles/cloudfunctions.invoker \
              --project=$GCLOUD_PROJECT_ID_TEST

            FUNCTION_NAME=nba_model_game_refresh
            gcloud functions deploy $FUNCTION_NAME \
              --source=./data_model \
              --project=$GCLOUD_PROJECT_ID_TEST \
              --allow-unauthenticated \
              --entry-point=create_model_data \
              --memory=1024MB \
              --runtime=python38 \
              --service-account=$CLOUD_FUNCTION_SERVICE_ACCOUNT_TEST \
              --trigger-http \
              --timeout=300

            gcloud alpha functions add-iam-policy-binding $FUNCTION_NAME \
              --member=allUsers \
              --role=roles/cloudfunctions.invoker \
              --project=$GCLOUD_PROJECT_ID_TEST

            # Deploy command
            FUNCTION_NAME=nba_get_upcoming_games
            gcloud functions deploy $FUNCTION_NAME \
              --source=./get_schedule \
              --project=$GCLOUD_PROJECT_ID_TEST \
              --allow-unauthenticated \
              --entry-point=write_to_bucket \
              --memory=512MB \
              --runtime=python38 \
              --service-account=$CLOUD_FUNCTION_SERVICE_ACCOUNT_TEST \
              --trigger-http \
              --timeout=60 \
              --set-env-vars=CLOUD_STORAGE_BUCKET=$CLOUD_STORAGE_BUCKET

            gcloud alpha functions add-iam-policy-binding $FUNCTION_NAME \
              --member=allUsers \
              --role=roles/cloudfunctions.invoker \
              --project=$GCLOUD_PROJECT_ID_TEST
            
      - run:
          name: Deploy Web Service to Google App Engine
          command:
            # Deploy command
            gcloud app deploy ./webapp/app.yaml --project=$GCLOUD_PROJECT_ID_TEST --promote --quiet           
  test:
    docker:
      - image: circleci/python:3.8

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
  
  push_main:

    docker:
      - image: cimg/base:2020.01

    working_directory: ~/repo

    steps:
      - checkout:
          path: ./test_github

      - run:
          name: "Configure Git"
          working_directory: ./test_github
          command: |
            git config --global user.email $GITHUB_USER_EMAIL
            git config --global user.name $GITHUB_USER_NAME

      - run:
          name: "Push to main test"
          working_directory: ./test_github
          command: |
            git checkout -q main
            git pull --tags origin test --no-commit && git commit -m "CircleCI Continuous Deployment Merge from Test after passing tests"
            git pull --tags origin main
            git push
    
workflows:
  version: 2.1
  build-lint:
    jobs:
      - build-lint
      - deploy-dev:
         requires:
           - build-lint
         filters:
           branches:
             only:
               - dev
      - deploy-test:
          requires:
            - build-lint
          filters:
            branches:
              only:
                - test
      - test:
          requires:
            - deploy-test
          filters:
            branches:
              only:
                - test
      - push_main:
          requires:
            - build-lint
          filters:
            branches:
              only:
                - test
          

