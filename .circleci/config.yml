# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
  build-test:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.8
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
 
  # conditional:
  #   docker:
  #     - image: google/cloud-sdk
  #   steps:
  #     - checkout
  #     - run:
  #         name: Just testing
  #         command: |
  #             # latest commit
  #             LATEST_COMMIT=$(git rev-parse HEAD)

  #             # latest commit where path/to/folder1 was changed
  #             FOLDER1_COMMIT=$(git log -1 --format=format:%H --full-diff scraper)
              
  #             if [ $FOLDER1_COMMIT = $LATEST_COMMIT ];
  #               then
  #                 echo "Lastest commit in scraper so run the deploy task"
  #                 echo $FOLDER1_COMMIT
  #                 echo $LATEST_COMMIT
  #               else
  #                 echo "Lastest commit not in scraper or code just doesn't work"
  #                 echo $FOLDER1_COMMIT
  #                 echo $LATEST_COMMIT
  #             fi
                  
  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout

      -run:
        name: Set Commit Variables
        command: |
        # latest commit
        LATEST_COMMIT=$(git rev-parse HEAD)

        # latest commit where scraper was changed
        SCRAPER_COMMIT=$(git log -1 --format=format:%H --full-diff scraper)

      - run:
        name: Authorize GCloud Command Line Tool
        command: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account circleci-gcf-deployer@nba-predictions-dev.iam.gserviceaccount.com --key-file=-
      
      - run:
        name: Deploy To Google Cloud Functions
        command: |
          if [ $LATEST_COMMIT = $SCRAPER_COMMIT ];
            then 
              # Deploy command
              FUNCTION_NAME=nba_basketball_reference_scraper
              gcloud functions deploy $FUNCTION_NAME \
                --source=./scraper \
                --project=$GCLOUD_PROJECT_ID \
                --allow-unauthenticated \
                --entry-point=nba_basketballreference_scraper \
                --memory=1024MB \
                --runtime=python38 \
                --service-account=biqquery-service-account@nba-predictions-dev.iam.gserviceaccount.com \
                --trigger-http \
                --timeout=300

              gcloud functions add-iam-policy-binding nba_basketball_reference_scraper \
                --member=allUsers \
                --role=roles/cloudfunctions.invoker \
                --project=$GCLOUD_PROJECT_ID
          else
            echo "No deployments necessary because no changes to deployment folder"
          fi

workflows:
  version: 2.1
  build-test-and-deploy:
    jobs:
      - build-test
      # - conditional
      - deploy:
         filters:
           branches:
             only:
               - main
      # need to add different workflow for CD only when change to file in specific path
